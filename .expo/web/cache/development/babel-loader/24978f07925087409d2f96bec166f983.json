{"ast":null,"code":"import React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { additiveInverseArray } from \"../utils/array\";\nimport { useKeyboard } from \"./useKeyboard\";\nexport function translateYOutputRangeFor(_ref) {\n  var position = _ref.position,\n      height = _ref.height,\n      topOffset = _ref.topOffset,\n      bottomOffset = _ref.bottomOffset,\n      keyboardHeight = _ref.keyboardHeight,\n      keyboardOffset = _ref.keyboardOffset;\n  var offset = position === 'bottom' ? bottomOffset : topOffset;\n  var keyboardAwareOffset = position === 'bottom' ? keyboardHeight + keyboardOffset : 0;\n  var range = [-(height * 2), Math.max(offset, keyboardAwareOffset)];\n  var outputRange = position === 'bottom' ? additiveInverseArray(range) : range;\n  return outputRange;\n}\nexport function useSlideAnimation(_ref2) {\n  var position = _ref2.position,\n      height = _ref2.height,\n      topOffset = _ref2.topOffset,\n      bottomOffset = _ref2.bottomOffset,\n      keyboardOffset = _ref2.keyboardOffset;\n  var animatedValue = React.useRef(new Animated.Value(0));\n\n  var _useKeyboard = useKeyboard(),\n      keyboardHeight = _useKeyboard.keyboardHeight;\n\n  var animate = React.useCallback(function (toValue) {\n    Animated.spring(animatedValue.current, {\n      toValue: toValue,\n      useNativeDriver: true,\n      friction: 8\n    }).start();\n  }, []);\n  var translateY = animatedValue.current.interpolate({\n    inputRange: [0, 1],\n    outputRange: translateYOutputRangeFor({\n      position: position,\n      height: height,\n      topOffset: topOffset,\n      bottomOffset: bottomOffset,\n      keyboardHeight: keyboardHeight,\n      keyboardOffset: keyboardOffset\n    })\n  });\n  var opacity = animatedValue.current.interpolate({\n    inputRange: [0, 0.7, 1],\n    outputRange: [0, 1, 1]\n  });\n  return {\n    animatedValue: animatedValue,\n    animate: animate,\n    animationStyles: {\n      opacity: opacity,\n      transform: [{\n        translateY: translateY\n      }]\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/VietAnh/Balogram/node_modules/react-native-toast-message/lib/src/hooks/useSlideAnimation.js"],"names":["React","additiveInverseArray","useKeyboard","translateYOutputRangeFor","position","height","topOffset","bottomOffset","keyboardHeight","keyboardOffset","offset","keyboardAwareOffset","range","Math","max","outputRange","useSlideAnimation","animatedValue","useRef","Animated","Value","animate","useCallback","toValue","spring","current","useNativeDriver","friction","start","translateY","interpolate","inputRange","opacity","animationStyles","transform"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,oBAAT;AACA,SAASC,WAAT;AACA,OAAO,SAASC,wBAAT,OAAiH;AAAA,MAA7EC,QAA6E,QAA7EA,QAA6E;AAAA,MAAnEC,MAAmE,QAAnEA,MAAmE;AAAA,MAA3DC,SAA2D,QAA3DA,SAA2D;AAAA,MAAhDC,YAAgD,QAAhDA,YAAgD;AAAA,MAAlCC,cAAkC,QAAlCA,cAAkC;AAAA,MAAlBC,cAAkB,QAAlBA,cAAkB;AACpH,MAAMC,MAAM,GAAGN,QAAQ,KAAK,QAAb,GAAwBG,YAAxB,GAAuCD,SAAtD;AACA,MAAMK,mBAAmB,GAAGP,QAAQ,KAAK,QAAb,GAAwBI,cAAc,GAAGC,cAAzC,GAA0D,CAAtF;AACA,MAAMG,KAAK,GAAG,CAAC,EAAEP,MAAM,GAAG,CAAX,CAAD,EAAgBQ,IAAI,CAACC,GAAL,CAASJ,MAAT,EAAiBC,mBAAjB,CAAhB,CAAd;AACA,MAAMI,WAAW,GAAGX,QAAQ,KAAK,QAAb,GAAwBH,oBAAoB,CAACW,KAAD,CAA5C,GAAsDA,KAA1E;AACA,SAAOG,WAAP;AACH;AACD,OAAO,SAASC,iBAAT,QAA0F;AAAA,MAA7DZ,QAA6D,SAA7DA,QAA6D;AAAA,MAAnDC,MAAmD,SAAnDA,MAAmD;AAAA,MAA3CC,SAA2C,SAA3CA,SAA2C;AAAA,MAAhCC,YAAgC,SAAhCA,YAAgC;AAAA,MAAlBE,cAAkB,SAAlBA,cAAkB;AAC7F,MAAMQ,aAAa,GAAGjB,KAAK,CAACkB,MAAN,CAAa,IAAIC,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAb,CAAtB;;AACA,qBAA2BlB,WAAW,EAAtC;AAAA,MAAQM,cAAR,gBAAQA,cAAR;;AACA,MAAMa,OAAO,GAAGrB,KAAK,CAACsB,WAAN,CAAkB,UAACC,OAAD,EAAa;AAC3CJ,IAAAA,QAAQ,CAACK,MAAT,CAAgBP,aAAa,CAACQ,OAA9B,EAAuC;AACnCF,MAAAA,OAAO,EAAPA,OADmC;AAEnCG,MAAAA,eAAe,EAAE,IAFkB;AAGnCC,MAAAA,QAAQ,EAAE;AAHyB,KAAvC,EAIGC,KAJH;AAKH,GANe,EAMb,EANa,CAAhB;AAOA,MAAMC,UAAU,GAAGZ,aAAa,CAACQ,OAAd,CAAsBK,WAAtB,CAAkC;AACjDC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADqC;AAEjDhB,IAAAA,WAAW,EAAEZ,wBAAwB,CAAC;AAClCC,MAAAA,QAAQ,EAARA,QADkC;AAElCC,MAAAA,MAAM,EAANA,MAFkC;AAGlCC,MAAAA,SAAS,EAATA,SAHkC;AAIlCC,MAAAA,YAAY,EAAZA,YAJkC;AAKlCC,MAAAA,cAAc,EAAdA,cALkC;AAMlCC,MAAAA,cAAc,EAAdA;AANkC,KAAD;AAFY,GAAlC,CAAnB;AAWA,MAAMuB,OAAO,GAAGf,aAAa,CAACQ,OAAd,CAAsBK,WAAtB,CAAkC;AAC9CC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,CADkC;AAE9ChB,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAFiC,GAAlC,CAAhB;AAIA,SAAO;AACHE,IAAAA,aAAa,EAAbA,aADG;AAEHI,IAAAA,OAAO,EAAPA,OAFG;AAGHY,IAAAA,eAAe,EAAE;AACbD,MAAAA,OAAO,EAAPA,OADa;AAEbE,MAAAA,SAAS,EAAE,CACP;AACIL,QAAAA,UAAU,EAAVA;AADJ,OADO;AAFE;AAHd,GAAP;AAYH","sourcesContent":["import React from 'react';\nimport { Animated } from 'react-native';\nimport { additiveInverseArray } from '../utils/array';\nimport { useKeyboard } from './useKeyboard';\nexport function translateYOutputRangeFor({ position, height, topOffset, bottomOffset, keyboardHeight, keyboardOffset }) {\n    const offset = position === 'bottom' ? bottomOffset : topOffset;\n    const keyboardAwareOffset = position === 'bottom' ? keyboardHeight + keyboardOffset : 0;\n    const range = [-(height * 2), Math.max(offset, keyboardAwareOffset)];\n    const outputRange = position === 'bottom' ? additiveInverseArray(range) : range;\n    return outputRange;\n}\nexport function useSlideAnimation({ position, height, topOffset, bottomOffset, keyboardOffset }) {\n    const animatedValue = React.useRef(new Animated.Value(0));\n    const { keyboardHeight } = useKeyboard();\n    const animate = React.useCallback((toValue) => {\n        Animated.spring(animatedValue.current, {\n            toValue,\n            useNativeDriver: true,\n            friction: 8\n        }).start();\n    }, []);\n    const translateY = animatedValue.current.interpolate({\n        inputRange: [0, 1],\n        outputRange: translateYOutputRangeFor({\n            position,\n            height,\n            topOffset,\n            bottomOffset,\n            keyboardHeight,\n            keyboardOffset\n        })\n    });\n    const opacity = animatedValue.current.interpolate({\n        inputRange: [0, 0.7, 1],\n        outputRange: [0, 1, 1]\n    });\n    return {\n        animatedValue,\n        animate,\n        animationStyles: {\n            opacity,\n            transform: [\n                {\n                    translateY\n                }\n            ]\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}