{"ast":null,"code":"import { getContext } from \"../utils/getContext.web\";\n\nfunction sizeFromAngle(width, height, angle) {\n  var radians = angle * Math.PI / 180;\n  var c = Math.cos(radians);\n  var s = Math.sin(radians);\n\n  if (s < 0) {\n    s = -s;\n  }\n\n  if (c < 0) {\n    c = -c;\n  }\n\n  return {\n    width: height * s + width * c,\n    height: height * c + width * s\n  };\n}\n\nexport default (function (canvas, degrees) {\n  var _sizeFromAngle = sizeFromAngle(canvas.width, canvas.height, degrees),\n      width = _sizeFromAngle.width,\n      height = _sizeFromAngle.height;\n\n  var result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n  var context = getContext(result);\n  context.translate(result.width / 2, result.height / 2);\n  var radians = degrees * Math.PI / 180;\n  context.rotate(radians);\n  context.drawImage(canvas, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n  return result;\n});","map":{"version":3,"sources":["../../src/actions/RotateAction.web.ts"],"names":[],"mappings":"AACA,SAAS,UAAT;;AAEA,SAAS,aAAT,CACE,KADF,EAEE,MAFF,EAGE,KAHF,EAGe;AAEb,MAAM,OAAO,GAAI,KAAK,GAAG,IAAI,CAAC,EAAd,GAAoB,GAApC;AACA,MAAI,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,OAAT,CAAR;AACA,MAAI,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,OAAT,CAAR;;AACA,MAAI,CAAC,GAAG,CAAR,EAAW;AACT,IAAA,CAAC,GAAG,CAAC,CAAL;AACD;;AACD,MAAI,CAAC,GAAG,CAAR,EAAW;AACT,IAAA,CAAC,GAAG,CAAC,CAAL;AACD;;AACD,SAAO;AAAE,IAAA,KAAK,EAAE,MAAM,GAAG,CAAT,GAAa,KAAK,GAAG,CAA9B;AAAiC,IAAA,MAAM,EAAE,MAAM,GAAG,CAAT,GAAa,KAAK,GAAG;AAA9D,GAAP;AACD;;AAED,gBAAe,UAAC,MAAD,EAA4B,OAA5B,EAA+D;AAC5E,uBAA0B,aAAa,CAAC,MAAM,CAAC,KAAR,EAAe,MAAM,CAAC,MAAtB,EAA8B,OAA9B,CAAvC;AAAA,MAAQ,KAAR,kBAAQ,KAAR;AAAA,MAAe,MAAf,kBAAe,MAAf;;AAEA,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAf;AACA,EAAA,MAAM,CAAC,KAAP,GAAe,KAAf;AACA,EAAA,MAAM,CAAC,MAAP,GAAgB,MAAhB;AAEA,MAAM,OAAO,GAAG,UAAU,CAAC,MAAD,CAA1B;AAGA,EAAA,OAAO,CAAC,SAAR,CAAkB,MAAM,CAAC,KAAP,GAAe,CAAjC,EAAoC,MAAM,CAAC,MAAP,GAAgB,CAApD;AAGA,MAAM,OAAO,GAAI,OAAO,GAAG,IAAI,CAAC,EAAhB,GAAsB,GAAtC;AACA,EAAA,OAAO,CAAC,MAAR,CAAe,OAAf;AAGA,EAAA,OAAO,CAAC,SAAR,CAAkB,MAAlB,EAA0B,CAAC,MAAM,CAAC,KAAR,GAAgB,CAA1C,EAA6C,CAAC,MAAM,CAAC,MAAR,GAAiB,CAA9D,EAAiE,MAAM,CAAC,KAAxE,EAA+E,MAAM,CAAC,MAAtF;AAEA,SAAO,MAAP;AACD,CApBD","sourcesContent":["import { ActionRotate } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\nfunction sizeFromAngle(\n  width: number,\n  height: number,\n  angle: number\n): { width: number; height: number } {\n  const radians = (angle * Math.PI) / 180;\n  let c = Math.cos(radians);\n  let s = Math.sin(radians);\n  if (s < 0) {\n    s = -s;\n  }\n  if (c < 0) {\n    c = -c;\n  }\n  return { width: height * s + width * c, height: height * c + width * s };\n}\n\nexport default (canvas: HTMLCanvasElement, degrees: ActionRotate['rotate']) => {\n  const { width, height } = sizeFromAngle(canvas.width, canvas.height, degrees);\n\n  const result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n\n  const context = getContext(result);\n\n  // Set the origin to the center of the image\n  context.translate(result.width / 2, result.height / 2);\n\n  // Rotate the canvas around the origin\n  const radians = (degrees * Math.PI) / 180;\n  context.rotate(radians);\n\n  // Draw the image\n  context.drawImage(canvas, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n\n  return result;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}