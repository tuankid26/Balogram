{"ast":null,"code":"import { getContext } from \"../utils/getContext.web\";\n\nfunction resampleSingle(canvas, width, height) {\n  var resizeCanvas = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var result = document.createElement('canvas');\n  result.width = canvas.width;\n  result.height = canvas.height;\n  var widthSource = canvas.width;\n  var heightSource = canvas.height;\n  width = Math.round(width);\n  height = Math.round(height);\n  var wRatio = widthSource / width;\n  var hRatio = heightSource / height;\n  var wRatioHalf = Math.ceil(wRatio / 2);\n  var hRatioHalf = Math.ceil(hRatio / 2);\n  var ctx = getContext(canvas);\n  var img = ctx.getImageData(0, 0, widthSource, heightSource);\n  var img2 = ctx.createImageData(width, height);\n  var data = img.data;\n  var data2 = img2.data;\n\n  for (var j = 0; j < height; j++) {\n    for (var i = 0; i < width; i++) {\n      var x2 = (i + j * width) * 4;\n      var weight = 0;\n      var weights = 0;\n      var weightsAlpha = 0;\n      var gx_r = 0;\n      var gx_g = 0;\n      var gx_b = 0;\n      var gx_a = 0;\n      var yCenter = (j + 0.5) * hRatio;\n      var yy_start = Math.floor(j * hRatio);\n      var yy_stop = Math.ceil((j + 1) * hRatio);\n\n      for (var yy = yy_start; yy < yy_stop; yy++) {\n        var dy = Math.abs(yCenter - (yy + 0.5)) / hRatioHalf;\n        var center_x = (i + 0.5) * wRatio;\n        var w0 = dy * dy;\n        var xx_start = Math.floor(i * wRatio);\n        var xx_stop = Math.ceil((i + 1) * wRatio);\n\n        for (var xx = xx_start; xx < xx_stop; xx++) {\n          var dx = Math.abs(center_x - (xx + 0.5)) / wRatioHalf;\n          var w = Math.sqrt(w0 + dx * dx);\n\n          if (w >= 1) {\n            continue;\n          }\n\n          weight = 2 * w * w * w - 3 * w * w + 1;\n          var xPosition = 4 * (xx + yy * widthSource);\n          gx_a += weight * data[xPosition + 3];\n          weightsAlpha += weight;\n\n          if (data[xPosition + 3] < 255) {\n            weight = weight * data[xPosition + 3] / 250;\n          }\n\n          gx_r += weight * data[xPosition];\n          gx_g += weight * data[xPosition + 1];\n          gx_b += weight * data[xPosition + 2];\n          weights += weight;\n        }\n      }\n\n      data2[x2] = gx_r / weights;\n      data2[x2 + 1] = gx_g / weights;\n      data2[x2 + 2] = gx_b / weights;\n      data2[x2 + 3] = gx_a / weightsAlpha;\n    }\n  }\n\n  if (resizeCanvas) {\n    result.width = width;\n    result.height = height;\n  }\n\n  var context = getContext(result);\n  context.putImageData(img2, 0, 0);\n  return result;\n}\n\nexport default (function (canvas, _ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  var imageRatio = canvas.width / canvas.height;\n  var requestedWidth = 0;\n  var requestedHeight = 0;\n\n  if (width !== undefined) {\n    requestedWidth = width;\n    requestedHeight = requestedWidth / imageRatio;\n  }\n\n  if (height !== undefined) {\n    requestedHeight = height;\n\n    if (requestedWidth === 0) {\n      requestedWidth = requestedHeight * imageRatio;\n    }\n  }\n\n  return resampleSingle(canvas, requestedWidth, requestedHeight, true);\n});","map":{"version":3,"sources":["../../src/actions/ResizeAction.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { ActionResize } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\n/**\n * Hermite resize - fast image resize/resample using Hermite filter. 1 cpu version!\n * https://stackoverflow.com/a/18320662/4047926\n *\n * @param {HTMLCanvasElement} canvas\n * @param {int} width\n * @param {int} height\n * @param {boolean} resizeCanvas if true, canvas will be resized. Optional.\n */\nfunction resampleSingle(\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n  resizeCanvas: boolean = false\n): HTMLCanvasElement {\n  const result = document.createElement('canvas');\n  result.width = canvas.width;\n  result.height = canvas.height;\n\n  const widthSource = canvas.width;\n  const heightSource = canvas.height;\n  width = Math.round(width);\n  height = Math.round(height);\n\n  const wRatio = widthSource / width;\n  const hRatio = heightSource / height;\n  const wRatioHalf = Math.ceil(wRatio / 2);\n  const hRatioHalf = Math.ceil(hRatio / 2);\n\n  const ctx = getContext(canvas);\n\n  const img = ctx.getImageData(0, 0, widthSource, heightSource);\n  const img2 = ctx.createImageData(width, height);\n  const data = img.data;\n  const data2 = img2.data;\n\n  for (let j = 0; j < height; j++) {\n    for (let i = 0; i < width; i++) {\n      const x2 = (i + j * width) * 4;\n      let weight = 0;\n      let weights = 0;\n      let weightsAlpha = 0;\n      let gx_r = 0;\n      let gx_g = 0;\n      let gx_b = 0;\n      let gx_a = 0;\n      const yCenter = (j + 0.5) * hRatio;\n      const yy_start = Math.floor(j * hRatio);\n      const yy_stop = Math.ceil((j + 1) * hRatio);\n      for (let yy = yy_start; yy < yy_stop; yy++) {\n        const dy = Math.abs(yCenter - (yy + 0.5)) / hRatioHalf;\n        const center_x = (i + 0.5) * wRatio;\n        const w0 = dy * dy; //pre-calc part of w\n        const xx_start = Math.floor(i * wRatio);\n        const xx_stop = Math.ceil((i + 1) * wRatio);\n        for (let xx = xx_start; xx < xx_stop; xx++) {\n          const dx = Math.abs(center_x - (xx + 0.5)) / wRatioHalf;\n          const w = Math.sqrt(w0 + dx * dx);\n          if (w >= 1) {\n            //pixel too far\n            continue;\n          }\n          //hermite filter\n          weight = 2 * w * w * w - 3 * w * w + 1;\n          const xPosition = 4 * (xx + yy * widthSource);\n          //alpha\n          gx_a += weight * data[xPosition + 3];\n          weightsAlpha += weight;\n          //colors\n          if (data[xPosition + 3] < 255) {\n            weight = (weight * data[xPosition + 3]) / 250;\n          }\n          gx_r += weight * data[xPosition];\n          gx_g += weight * data[xPosition + 1];\n          gx_b += weight * data[xPosition + 2];\n          weights += weight;\n        }\n      }\n      data2[x2] = gx_r / weights;\n      data2[x2 + 1] = gx_g / weights;\n      data2[x2 + 2] = gx_b / weights;\n      data2[x2 + 3] = gx_a / weightsAlpha;\n    }\n  }\n\n  //resize canvas\n  if (resizeCanvas) {\n    result.width = width;\n    result.height = height;\n  }\n\n  //draw\n  const context = getContext(result);\n  context.putImageData(img2, 0, 0);\n\n  return result;\n}\n\nexport default (canvas: HTMLCanvasElement, { width, height }: ActionResize['resize']) => {\n  const imageRatio = canvas.width / canvas.height;\n\n  let requestedWidth: number = 0;\n  let requestedHeight: number = 0;\n  if (width !== undefined) {\n    requestedWidth = width;\n    requestedHeight = requestedWidth / imageRatio;\n  }\n  if (height !== undefined) {\n    requestedHeight = height;\n    if (requestedWidth === 0) {\n      requestedWidth = requestedHeight * imageRatio;\n    }\n  }\n\n  return resampleSingle(canvas, requestedWidth, requestedHeight, true);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}