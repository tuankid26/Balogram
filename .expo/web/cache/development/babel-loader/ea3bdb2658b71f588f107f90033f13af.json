{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\VietAnh\\\\Balogram\\\\screen\\\\MainMessengerScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { data } from \"../log_data/data.js\";\nimport Item_Messenger from \"../components/Item_Messenger\";\nimport { LinePartition } from \"../components\";\nimport { theme } from \"../components/core/theme\";\nimport { chat } from \"../handle_api\";\nexport default function MainMessengerScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      chats = _useState2[0],\n      setChats = _useState2[1];\n\n  var token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRydW5ndnVob2FuZyIsImlkIjoiNjE4ZTk3NTg3NDU1MGEyMmE0Y2IyYTkwIiwiaWF0IjoxNjM2NzM0ODA5fQ.NwBPkKkhl8IHr64k-4EwTPMhtzY2IM0J6TXqm8c-DNk\";\n  useEffect(function () {\n    var initialize = function initialize() {\n      var newChats;\n      return _regeneratorRuntime.async(function initialize$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchChats());\n\n            case 2:\n              newChats = _context.sent;\n              setChats(newChats.map(function (msg) {\n                return {\n                  id: msg[0]._id,\n                  name: msg[1].username,\n                  avatar: msg[1].avatar,\n                  text: msg[2].content\n                };\n              }).reverse());\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    initialize();\n  }, []);\n\n  var fetchChats = function fetchChats() {\n    var res;\n    return _regeneratorRuntime.async(function fetchChats$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(chat.listChat(token));\n\n          case 3:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", res.data.data);\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  var _renderItem = function renderItem(item) {\n    return React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        navigation.navigate(\"ChatMessengerScreen\", {\n          item: item\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, React.createElement(Item_Messenger, {\n      item: item,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return React.createElement(View, {\n    style: styles.wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.headerBar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.headerLeft,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"BaloGram\")), React.createElement(View, {\n    style: styles.headerRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, React.createElement(Ionicons, {\n    name: \"md-search-outline\",\n    style: styles.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }))), React.createElement(LinePartition, {\n    color: theme.colors.black,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), React.createElement(FlatList, {\n    data: chats,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return _renderItem(item);\n    },\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  wrapper: {\n    flex: 1,\n    backgroundColor: \"white\"\n  },\n  title: {\n    fontSize: 24,\n    color: theme.colors.logo,\n    padding: 20\n  },\n  headerBar: {\n    height: 40,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    backgroundColor: theme.colors.white\n  },\n  headerLeft: {\n    flex: 1\n  },\n  headerRight: {\n    flex: 1,\n    justifyContent: \"flex-end\",\n    flexDirection: \"row\"\n  },\n  icon: {\n    fontSize: 25,\n    marginRight: 15\n  }\n});","map":{"version":3,"sources":["C:/Users/VietAnh/Balogram/screen/MainMessengerScreen.js"],"names":["React","Component","useState","useEffect","Ionicons","data","Item_Messenger","LinePartition","theme","chat","MainMessengerScreen","navigation","chats","setChats","token","initialize","fetchChats","newChats","map","msg","id","_id","name","username","avatar","text","content","reverse","listChat","res","console","log","renderItem","item","navigate","styles","wrapper","headerBar","headerLeft","title","headerRight","icon","colors","black","StyleSheet","create","flex","backgroundColor","fontSize","color","logo","padding","height","flexDirection","alignItems","white","justifyContent","marginRight"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  FlatList,\r\n  Text,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n  Dimensions,\r\n} from \"react-native\";\r\nimport { Ionicons } from \"react-native-vector-icons\";\r\n\r\nimport { data } from \"../log_data/data.js\";\r\nimport Item_Messenger from \"../components/Item_Messenger\";\r\nimport { LinePartition } from \"../components\";\r\nimport { theme } from \"../components/core/theme\";\r\n\r\nimport { chat } from \"../handle_api\";\r\nexport default function MainMessengerScreen({ navigation }) {\r\n  const [chats, setChats] = useState([]);\r\n  const token =\r\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRydW5ndnVob2FuZyIsImlkIjoiNjE4ZTk3NTg3NDU1MGEyMmE0Y2IyYTkwIiwiaWF0IjoxNjM2NzM0ODA5fQ.NwBPkKkhl8IHr64k-4EwTPMhtzY2IM0J6TXqm8c-DNk\";\r\n  useEffect(() => {\r\n    const initialize = async () => {\r\n      const newChats = await fetchChats();\r\n      setChats(\r\n        newChats\r\n          .map((msg) => ({\r\n            id: msg[0]._id,\r\n            name: msg[1].username,\r\n            avatar: msg[1].avatar,\r\n            text: msg[2].content,\r\n          }))\r\n          .reverse()\r\n      );\r\n    };\r\n    initialize();\r\n  }, []);\r\n\r\n  const fetchChats = async () => {\r\n    try {\r\n      const res = await chat.listChat(token);\r\n      return res.data.data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const renderItem = (item) => {\r\n    return (\r\n      <View>\r\n        <TouchableOpacity\r\n          onPress={() => {\r\n            navigation.navigate(\"ChatMessengerScreen\", { item });\r\n          }}\r\n        >\r\n          <Item_Messenger item={item} />\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  };\r\n  return (\r\n    <View style={styles.wrapper}>\r\n      <View style={styles.headerBar}>\r\n        <View style={styles.headerLeft}>\r\n          <Text style={styles.title}>BaloGram</Text>\r\n        </View>\r\n        <View style={styles.headerRight}>\r\n          <Ionicons name=\"md-search-outline\" style={styles.icon} />\r\n        </View>\r\n      </View>\r\n      <LinePartition color={theme.colors.black} />\r\n      <FlatList\r\n        // ref={\"flatList\"}\r\n        data={chats}\r\n        renderItem={({ item }) => renderItem(item)}\r\n        keyExtractor={(item) => item.id}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  wrapper: {\r\n    flex: 1,\r\n    backgroundColor: \"white\",\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    // fontWeight: 'bold',\r\n    color: theme.colors.logo,\r\n    padding: 20,\r\n  },\r\n  headerBar: {\r\n    height: 40,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    backgroundColor: theme.colors.white,\r\n  },\r\n\r\n  headerLeft: {\r\n    flex: 1,\r\n  },\r\n  headerRight: {\r\n    flex: 1,\r\n    justifyContent: \"flex-end\",\r\n    flexDirection: \"row\",\r\n  },\r\n  icon: {\r\n    fontSize: 25,\r\n    marginRight: 15,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}