{"ast":null,"code":"import { CodedError } from 'expo-modules-core';\nimport { getContext } from \"../utils/getContext.web\";\nexport default (function (canvas, options) {\n  var _options$originX = options.originX,\n      originX = _options$originX === void 0 ? 0 : _options$originX,\n      _options$originY = options.originY,\n      originY = _options$originY === void 0 ? 0 : _options$originY,\n      _options$width = options.width,\n      width = _options$width === void 0 ? 0 : _options$width,\n      _options$height = options.height,\n      height = _options$height === void 0 ? 0 : _options$height;\n\n  var clamp = function clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n  };\n\n  width = clamp(width, canvas.width);\n  height = clamp(height, canvas.height);\n  originX = clamp(originX, canvas.width);\n  originY = clamp(originY, canvas.height);\n  width = Math.min(originX + width, canvas.width) - originX;\n  height = Math.min(originY + height, canvas.height) - originY;\n\n  if (width === 0 || height === 0) {\n    throw new CodedError('ERR_IMAGE_MANIPULATOR_CROP', 'Crop size must be greater than 0: ' + JSON.stringify(options, null, 2));\n  }\n\n  var result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n  var context = getContext(result);\n  context.drawImage(canvas, originX, originY, width, height, 0, 0, width, height);\n  return result;\n});","map":{"version":3,"sources":["../../src/actions/CropAction.web.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,mBAA3B;AAGA,SAAS,UAAT;AAEA,gBAAe,UAAC,MAAD,EAA4B,OAA5B,EAA2D;AAExE,yBAA0D,OAA1D,CAAM,OAAN;AAAA,MAAM,OAAN,iCAAgB,CAAhB;AAAA,yBAA0D,OAA1D,CAAmB,OAAnB;AAAA,MAAmB,OAAnB,iCAA6B,CAA7B;AAAA,uBAA0D,OAA1D,CAAgC,KAAhC;AAAA,MAAgC,KAAhC,+BAAwC,CAAxC;AAAA,wBAA0D,OAA1D,CAA2C,MAA3C;AAAA,MAA2C,MAA3C,gCAAoD,CAApD;;AACA,MAAM,KAAK,GAAG,SAAR,KAAQ,CAAC,KAAD,EAAQ,GAAR;AAAA,WAAgB,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,KAAd,CAAZ,CAAhB;AAAA,GAAd;;AAEA,EAAA,KAAK,GAAG,KAAK,CAAC,KAAD,EAAQ,MAAM,CAAC,KAAf,CAAb;AACA,EAAA,MAAM,GAAG,KAAK,CAAC,MAAD,EAAS,MAAM,CAAC,MAAhB,CAAd;AACA,EAAA,OAAO,GAAG,KAAK,CAAC,OAAD,EAAU,MAAM,CAAC,KAAjB,CAAf;AACA,EAAA,OAAO,GAAG,KAAK,CAAC,OAAD,EAAU,MAAM,CAAC,MAAjB,CAAf;AAGA,EAAA,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,OAAO,GAAG,KAAnB,EAA0B,MAAM,CAAC,KAAjC,IAA0C,OAAlD;AACA,EAAA,MAAM,GAAG,IAAI,CAAC,GAAL,CAAS,OAAO,GAAG,MAAnB,EAA2B,MAAM,CAAC,MAAlC,IAA4C,OAArD;;AAEA,MAAI,KAAK,KAAK,CAAV,IAAe,MAAM,KAAK,CAA9B,EAAiC;AAC/B,UAAM,IAAI,UAAJ,CACJ,4BADI,EAEJ,uCAAuC,IAAI,CAAC,SAAL,CAAe,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAFnC,CAAN;AAID;;AAED,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAf;AACA,EAAA,MAAM,CAAC,KAAP,GAAe,KAAf;AACA,EAAA,MAAM,CAAC,MAAP,GAAgB,MAAhB;AAEA,MAAM,OAAO,GAAG,UAAU,CAAC,MAAD,CAA1B;AACA,EAAA,OAAO,CAAC,SAAR,CAAkB,MAAlB,EAA0B,OAA1B,EAAmC,OAAnC,EAA4C,KAA5C,EAAmD,MAAnD,EAA2D,CAA3D,EAA8D,CAA9D,EAAiE,KAAjE,EAAwE,MAAxE;AAEA,SAAO,MAAP;AACD,CA7BD","sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { ActionCrop } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\nexport default (canvas: HTMLCanvasElement, options: ActionCrop['crop']) => {\n  // ensure values are defined.\n  let { originX = 0, originY = 0, width = 0, height = 0 } = options;\n  const clamp = (value, max) => Math.max(0, Math.min(max, value));\n  // lock within bounds.\n  width = clamp(width, canvas.width);\n  height = clamp(height, canvas.height);\n  originX = clamp(originX, canvas.width);\n  originY = clamp(originY, canvas.height);\n\n  // lock sum of crop.\n  width = Math.min(originX + width, canvas.width) - originX;\n  height = Math.min(originY + height, canvas.height) - originY;\n\n  if (width === 0 || height === 0) {\n    throw new CodedError(\n      'ERR_IMAGE_MANIPULATOR_CROP',\n      'Crop size must be greater than 0: ' + JSON.stringify(options, null, 2)\n    );\n  }\n\n  const result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n\n  const context = getContext(result);\n  context.drawImage(canvas, originX, originY, width, height, 0, 0, width, height);\n\n  return result;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}