{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { FlipType, SaveFormat } from \"./ImageManipulator.types\";\nexport function validateArguments(uri, actions, saveOptions) {\n  validateUri(uri);\n  validateActions(actions);\n  validateSaveOptions(saveOptions);\n}\nexport function validateUri(uri) {\n  if (!(typeof uri === 'string')) {\n    throw new TypeError('The \"uri\" argument must be a string');\n  }\n}\nexport function validateActions(actions) {\n  if (!Array.isArray(actions)) {\n    throw new TypeError('The \"actions\" argument must be an array');\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(actions), _step; !(_step = _iterator()).done;) {\n    var action = _step.value;\n\n    if (typeof action !== 'object' || action === null) {\n      throw new TypeError('Action must be an object');\n    }\n\n    var supportedActionTypes = ['crop', 'flip', 'rotate', 'resize'];\n    var actionKeys = Object.keys(action);\n\n    if (actionKeys.length !== 1) {\n      throw new TypeError(\"Single action must contain exactly one transformation: \" + supportedActionTypes.join(', '));\n    }\n\n    var actionType = actionKeys[0];\n\n    if (!supportedActionTypes.includes(actionType)) {\n      throw new TypeError(\"Unsupported action type: \" + actionType);\n    }\n\n    if (actionType === 'crop') {\n      validateCropAction(action);\n    } else if (actionType === 'flip') {\n      validateFlipAction(action);\n    } else if (actionType === 'rotate') {\n      validateRotateAction(action);\n    } else if (actionType === 'resize') {\n      validateResizeAction(action);\n    }\n  }\n}\n\nfunction validateCropAction(action) {\n  var isValid = typeof action.crop === 'object' && action.crop !== null && typeof action.crop.originX === 'number' && typeof action.crop.originY === 'number' && typeof action.crop.width === 'number' && typeof action.crop.height === 'number';\n\n  if (!isValid) {\n    throw new TypeError('Crop action must be an object of shape { originX: number; originY: number; width: number; height: number }');\n  }\n}\n\nfunction validateFlipAction(action) {\n  if (typeof action.flip !== 'string' || ![FlipType.Horizontal, FlipType.Vertical].includes(action.flip)) {\n    throw new TypeError(\"Unsupported flip type: \" + action.flip);\n  }\n}\n\nfunction validateRotateAction(action) {\n  if (typeof action.rotate !== 'number') {\n    throw new TypeError('Rotation must be a number');\n  }\n}\n\nfunction validateResizeAction(action) {\n  var isValid = typeof action.resize === 'object' && action.resize !== null && (typeof action.resize.width === 'number' || typeof action.resize.width === 'undefined') && (typeof action.resize.height === 'number' || typeof action.resize.height === 'undefined');\n\n  if (!isValid) {\n    throw new TypeError('Resize action must be an object of shape { width?: number; height?: number }');\n  }\n}\n\nexport function validateSaveOptions(_ref) {\n  var base64 = _ref.base64,\n      compress = _ref.compress,\n      format = _ref.format;\n\n  if (base64 !== undefined && typeof base64 !== 'boolean') {\n    throw new TypeError('The \"base64\" argument must be a boolean');\n  }\n\n  if (compress !== undefined) {\n    if (typeof compress !== 'number') {\n      throw new TypeError('The \"compress\" argument must be a number');\n    }\n\n    if (compress < 0 || compress > 1) {\n      throw new TypeError('The \"compress\" argument must be a number between 0 and 1');\n    }\n  }\n\n  var allowedFormats = [SaveFormat.JPEG, SaveFormat.PNG, SaveFormat.WEBP];\n\n  if (format !== undefined && !allowedFormats.includes(format)) {\n    throw new TypeError(\"The \\\"format\\\" argument must be one of: \" + allowedFormats.join(', '));\n  }\n}","map":{"version":3,"sources":["../src/validators.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Action,\n  ActionCrop,\n  ActionFlip,\n  ActionResize,\n  ActionRotate,\n  FlipType,\n  SaveFormat,\n  SaveOptions,\n} from './ImageManipulator.types';\n\nexport function validateArguments(uri: string, actions: Action[], saveOptions: SaveOptions) {\n  validateUri(uri);\n  validateActions(actions);\n  validateSaveOptions(saveOptions);\n}\n\nexport function validateUri(uri: string): void {\n  if (!(typeof uri === 'string')) {\n    throw new TypeError('The \"uri\" argument must be a string');\n  }\n}\n\nexport function validateActions(actions: Action[]): void {\n  if (!Array.isArray(actions)) {\n    throw new TypeError('The \"actions\" argument must be an array');\n  }\n  for (const action of actions) {\n    if (typeof action !== 'object' || action === null) {\n      throw new TypeError('Action must be an object');\n    }\n    const supportedActionTypes = ['crop', 'flip', 'rotate', 'resize'];\n    const actionKeys = Object.keys(action);\n    if (actionKeys.length !== 1) {\n      throw new TypeError(\n        `Single action must contain exactly one transformation: ${supportedActionTypes.join(', ')}`\n      );\n    }\n    const actionType = actionKeys[0];\n    if (!supportedActionTypes.includes(actionType)) {\n      throw new TypeError(`Unsupported action type: ${actionType}`);\n    }\n\n    if (actionType === 'crop') {\n      validateCropAction(action as ActionCrop);\n    } else if (actionType === 'flip') {\n      validateFlipAction(action as ActionFlip);\n    } else if (actionType === 'rotate') {\n      validateRotateAction(action as ActionRotate);\n    } else if (actionType === 'resize') {\n      validateResizeAction(action as ActionResize);\n    }\n  }\n}\n\nfunction validateCropAction(action: ActionCrop): void {\n  const isValid =\n    typeof action.crop === 'object' &&\n    action.crop !== null &&\n    typeof action.crop.originX === 'number' &&\n    typeof action.crop.originY === 'number' &&\n    typeof action.crop.width === 'number' &&\n    typeof action.crop.height === 'number';\n  if (!isValid) {\n    throw new TypeError(\n      'Crop action must be an object of shape { originX: number; originY: number; width: number; height: number }'\n    );\n  }\n}\n\nfunction validateFlipAction(action: ActionFlip): void {\n  if (\n    typeof action.flip !== 'string' ||\n    ![FlipType.Horizontal, FlipType.Vertical].includes(action.flip)\n  ) {\n    throw new TypeError(`Unsupported flip type: ${action.flip}`);\n  }\n}\n\nfunction validateRotateAction(action: ActionRotate): void {\n  if (typeof action.rotate !== 'number') {\n    throw new TypeError('Rotation must be a number');\n  }\n}\n\nfunction validateResizeAction(action: ActionResize): void {\n  const isValid =\n    typeof action.resize === 'object' &&\n    action.resize !== null &&\n    (typeof action.resize.width === 'number' || typeof action.resize.width === 'undefined') &&\n    (typeof action.resize.height === 'number' || typeof action.resize.height === 'undefined');\n  if (!isValid) {\n    throw new TypeError(\n      'Resize action must be an object of shape { width?: number; height?: number }'\n    );\n  }\n}\n\nexport function validateSaveOptions({ base64, compress, format }: SaveOptions): void {\n  if (base64 !== undefined && typeof base64 !== 'boolean') {\n    throw new TypeError('The \"base64\" argument must be a boolean');\n  }\n  if (compress !== undefined) {\n    if (typeof compress !== 'number') {\n      throw new TypeError('The \"compress\" argument must be a number');\n    }\n    if (compress < 0 || compress > 1) {\n      throw new TypeError('The \"compress\" argument must be a number between 0 and 1');\n    }\n  }\n  const allowedFormats = [SaveFormat.JPEG, SaveFormat.PNG, SaveFormat.WEBP];\n  if (format !== undefined && !allowedFormats.includes(format)) {\n    throw new TypeError(`The \"format\" argument must be one of: ${allowedFormats.join(', ')}`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}