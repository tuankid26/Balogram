{"ast":null,"code":"import React from 'react';\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nexport function shouldSetPanResponder(_event, gesture) {\n  var dx = gesture.dx,\n      dy = gesture.dy;\n  var offset = 2;\n  return Math.abs(dx) > offset || Math.abs(dy) > offset;\n}\nexport function shouldDismissView(newAnimatedValue, gesture) {\n  var dismissThreshold = 0.65;\n  var vy = gesture.vy,\n      dy = gesture.dy;\n  return newAnimatedValue <= dismissThreshold || Math.abs(vy) >= dismissThreshold && dy < 0;\n}\nexport function usePanResponder(_ref) {\n  var animatedValue = _ref.animatedValue,\n      computeNewAnimatedValueForGesture = _ref.computeNewAnimatedValueForGesture,\n      onDismiss = _ref.onDismiss,\n      onRestore = _ref.onRestore;\n  var onMove = React.useCallback(function (_event, gesture) {\n    var _animatedValue$curren;\n\n    var newAnimatedValue = computeNewAnimatedValueForGesture(gesture);\n    (_animatedValue$curren = animatedValue.current) == null ? void 0 : _animatedValue$curren.setValue(newAnimatedValue);\n  }, [animatedValue, computeNewAnimatedValueForGesture]);\n  var onRelease = React.useCallback(function (_event, gesture) {\n    var newAnimatedValue = computeNewAnimatedValueForGesture(gesture);\n\n    if (shouldDismissView(newAnimatedValue, gesture)) {\n      onDismiss();\n    } else {\n      onRestore();\n    }\n  }, [computeNewAnimatedValueForGesture, onDismiss, onRestore]);\n  var panResponder = React.useMemo(function () {\n    return PanResponder.create({\n      onMoveShouldSetPanResponder: shouldSetPanResponder,\n      onMoveShouldSetPanResponderCapture: shouldSetPanResponder,\n      onPanResponderMove: onMove,\n      onPanResponderRelease: onRelease\n    });\n  }, [onMove, onRelease]);\n  return {\n    panResponder: panResponder,\n    onMove: onMove,\n    onRelease: onRelease\n  };\n}","map":{"version":3,"sources":["C:/Users/VietAnh/Balogram/node_modules/react-native-toast-message/lib/src/hooks/usePanResponder.js"],"names":["React","shouldSetPanResponder","_event","gesture","dx","dy","offset","Math","abs","shouldDismissView","newAnimatedValue","dismissThreshold","vy","usePanResponder","animatedValue","computeNewAnimatedValueForGesture","onDismiss","onRestore","onMove","useCallback","current","setValue","onRelease","panResponder","useMemo","PanResponder","create","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderMove","onPanResponderRelease"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,SAASC,qBAAT,CAA+BC,MAA/B,EAAuCC,OAAvC,EAAgD;AACnD,MAAQC,EAAR,GAAmBD,OAAnB,CAAQC,EAAR;AAAA,MAAYC,EAAZ,GAAmBF,OAAnB,CAAYE,EAAZ;AAGA,MAAMC,MAAM,GAAG,CAAf;AACA,SAAOC,IAAI,CAACC,GAAL,CAASJ,EAAT,IAAeE,MAAf,IAAyBC,IAAI,CAACC,GAAL,CAASH,EAAT,IAAeC,MAA/C;AACH;AACD,OAAO,SAASG,iBAAT,CAA2BC,gBAA3B,EAA6CP,OAA7C,EAAsD;AACzD,MAAMQ,gBAAgB,GAAG,IAAzB;AACA,MAAQC,EAAR,GAAmBT,OAAnB,CAAQS,EAAR;AAAA,MAAYP,EAAZ,GAAmBF,OAAnB,CAAYE,EAAZ;AACA,SAAQK,gBAAgB,IAAIC,gBAApB,IACHJ,IAAI,CAACC,GAAL,CAASI,EAAT,KAAgBD,gBAAhB,IAAoCN,EAAE,GAAG,CAD9C;AAEH;AACD,OAAO,SAASQ,eAAT,OAAqG;AAAA,MAA1EC,aAA0E,QAA1EA,aAA0E;AAAA,MAA3DC,iCAA2D,QAA3DA,iCAA2D;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;AACxG,MAAMC,MAAM,GAAGlB,KAAK,CAACmB,WAAN,CAAkB,UAACjB,MAAD,EAASC,OAAT,EAAqB;AAAA;;AAClD,QAAMO,gBAAgB,GAAGK,iCAAiC,CAACZ,OAAD,CAA1D;AACA,6BAAAW,aAAa,CAACM,OAAd,2CAAuBC,QAAvB,CAAgCX,gBAAhC;AACH,GAHc,EAGZ,CAACI,aAAD,EAAgBC,iCAAhB,CAHY,CAAf;AAIA,MAAMO,SAAS,GAAGtB,KAAK,CAACmB,WAAN,CAAkB,UAACjB,MAAD,EAASC,OAAT,EAAqB;AACrD,QAAMO,gBAAgB,GAAGK,iCAAiC,CAACZ,OAAD,CAA1D;;AACA,QAAIM,iBAAiB,CAACC,gBAAD,EAAmBP,OAAnB,CAArB,EAAkD;AAC9Ca,MAAAA,SAAS;AACZ,KAFD,MAGK;AACDC,MAAAA,SAAS;AACZ;AACJ,GARiB,EAQf,CAACF,iCAAD,EAAoCC,SAApC,EAA+CC,SAA/C,CARe,CAAlB;AASA,MAAMM,YAAY,GAAGvB,KAAK,CAACwB,OAAN,CAAc;AAAA,WAAMC,YAAY,CAACC,MAAb,CAAoB;AACzDC,MAAAA,2BAA2B,EAAE1B,qBAD4B;AAEzD2B,MAAAA,kCAAkC,EAAE3B,qBAFqB;AAGzD4B,MAAAA,kBAAkB,EAAEX,MAHqC;AAIzDY,MAAAA,qBAAqB,EAAER;AAJkC,KAApB,CAAN;AAAA,GAAd,EAKjB,CAACJ,MAAD,EAASI,SAAT,CALiB,CAArB;AAMA,SAAO;AACHC,IAAAA,YAAY,EAAZA,YADG;AAEHL,IAAAA,MAAM,EAANA,MAFG;AAGHI,IAAAA,SAAS,EAATA;AAHG,GAAP;AAKH","sourcesContent":["import React from 'react';\nimport { PanResponder } from 'react-native';\nexport function shouldSetPanResponder(_event, gesture) {\n    const { dx, dy } = gesture;\n    // Fixes onPress handler\n    // https://github.com/calintamas/react-native-toast-message/issues/113\n    const offset = 2;\n    return Math.abs(dx) > offset || Math.abs(dy) > offset;\n}\nexport function shouldDismissView(newAnimatedValue, gesture) {\n    const dismissThreshold = 0.65;\n    const { vy, dy } = gesture;\n    return (newAnimatedValue <= dismissThreshold ||\n        (Math.abs(vy) >= dismissThreshold && dy < 0));\n}\nexport function usePanResponder({ animatedValue, computeNewAnimatedValueForGesture, onDismiss, onRestore }) {\n    const onMove = React.useCallback((_event, gesture) => {\n        const newAnimatedValue = computeNewAnimatedValueForGesture(gesture);\n        animatedValue.current?.setValue(newAnimatedValue);\n    }, [animatedValue, computeNewAnimatedValueForGesture]);\n    const onRelease = React.useCallback((_event, gesture) => {\n        const newAnimatedValue = computeNewAnimatedValueForGesture(gesture);\n        if (shouldDismissView(newAnimatedValue, gesture)) {\n            onDismiss();\n        }\n        else {\n            onRestore();\n        }\n    }, [computeNewAnimatedValueForGesture, onDismiss, onRestore]);\n    const panResponder = React.useMemo(() => PanResponder.create({\n        onMoveShouldSetPanResponder: shouldSetPanResponder,\n        onMoveShouldSetPanResponderCapture: shouldSetPanResponder,\n        onPanResponderMove: onMove,\n        onPanResponderRelease: onRelease\n    }), [onMove, onRelease]);\n    return {\n        panResponder,\n        onMove,\n        onRelease\n    };\n}\n"]},"metadata":{},"sourceType":"module"}