{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"format\"];\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { UnavailabilityError } from 'expo-modules-core';\nimport ExpoImageManipulator from \"./ExpoImageManipulator\";\nimport { SaveFormat } from \"./ImageManipulator.types\";\nimport { validateArguments } from \"./validators\";\nexport function manipulateAsync(uri) {\n  var actions,\n      saveOptions,\n      _saveOptions$format,\n      format,\n      rest,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function manipulateAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          actions = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];\n          saveOptions = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n\n          if (ExpoImageManipulator.manipulateAsync) {\n            _context.next = 4;\n            break;\n          }\n\n          throw new UnavailabilityError('ImageManipulator', 'manipulateAsync');\n\n        case 4:\n          validateArguments(uri, actions, saveOptions);\n          _saveOptions$format = saveOptions.format, format = _saveOptions$format === void 0 ? SaveFormat.JPEG : _saveOptions$format, rest = _objectWithoutProperties(saveOptions, _excluded);\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(ExpoImageManipulator.manipulateAsync(uri, actions, _objectSpread({\n            format: format\n          }, rest)));\n\n        case 8:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport * from \"./ImageManipulator.types\";","map":{"version":3,"sources":["../src/ImageManipulator.ts"],"names":[],"mappings":";;;;;;;;;AAAA,SAAS,mBAAT,QAAoC,mBAApC;AAEA,OAAO,oBAAP;AACA,SAA8B,UAA9B;AACA,SAAS,iBAAT;AAcA,OAAO,SAAe,eAAf,CACL,GADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEL,UAAA,OAFK,2DAEe,EAFf;AAGL,UAAA,WAHK,2DAGsB,EAHtB;;AAAA,cAKA,oBAAoB,CAAC,eALrB;AAAA;AAAA;AAAA;;AAAA,gBAMG,IAAI,mBAAJ,CAAwB,kBAAxB,EAA4C,iBAA5C,CANH;;AAAA;AASL,UAAA,iBAAiB,CAAC,GAAD,EAAM,OAAN,EAAe,WAAf,CAAjB;AATK,gCAWyC,WAXzC,CAWG,MAXH,EAWG,MAXH,oCAWY,UAAU,CAAC,IAXvB,wBAWgC,IAXhC,4BAWyC,WAXzC;AAAA;AAAA,2CAYQ,oBAAoB,CAAC,eAArB,CAAqC,GAArC,EAA0C,OAA1C;AAAqD,YAAA,MAAM,EAAN;AAArD,aAAgE,IAAhE,EAZR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeP","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoImageManipulator from './ExpoImageManipulator';\nimport { Action, ImageResult, SaveFormat, SaveOptions } from './ImageManipulator.types';\nimport { validateArguments } from './validators';\n\n// @needsAudit\n/**\n * Manipulate the image provided via `uri`. Available modifications are rotating, flipping (mirroring),\n * resizing and cropping. Each invocation results in a new file. With one invocation you can provide\n * a set of actions to perform over the image. Overwriting the source file would not have an effect\n * in displaying the result as images are cached.\n * @param uri URI of the file to manipulate. Should be on the local file system or a base64 data URI.\n * @param actions An array of objects representing manipulation options. Each object should have\n * __only one__ of the keys that corresponds to specific transformation.\n * @param saveOptions A map defining how modified image should be saved.\n * @return Promise which fulfils with [`ImageResult`](#imageresult) object.\n */\nexport async function manipulateAsync(\n  uri: string,\n  actions: Action[] = [],\n  saveOptions: SaveOptions = {}\n): Promise<ImageResult> {\n  if (!ExpoImageManipulator.manipulateAsync) {\n    throw new UnavailabilityError('ImageManipulator', 'manipulateAsync');\n  }\n\n  validateArguments(uri, actions, saveOptions);\n\n  const { format = SaveFormat.JPEG, ...rest } = saveOptions;\n  return await ExpoImageManipulator.manipulateAsync(uri, actions, { format, ...rest });\n}\n\nexport * from './ImageManipulator.types';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}