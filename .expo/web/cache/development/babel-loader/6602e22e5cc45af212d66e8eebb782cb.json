{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport function mergeIfDefined(obj1, obj2) {\n  var newObj = _objectSpread({}, obj1);\n\n  Object.entries(obj2).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    if (value !== null && value !== undefined) {\n      newObj[key] = value;\n    }\n  });\n  return newObj;\n}","map":{"version":3,"sources":["C:/Users/VietAnh/Balogram/node_modules/react-native-toast-message/lib/src/utils/obj.js"],"names":["mergeIfDefined","obj1","obj2","newObj","Object","entries","forEach","key","value","undefined"],"mappings":";;;;;;;AAAA,OAAO,SAASA,cAAT,CAAwBC,IAAxB,EAA8BC,IAA9B,EAAoC;AACvC,MAAMC,MAAM,qBACLF,IADK,CAAZ;;AAGAG,EAAAA,MAAM,CAACC,OAAP,CAAeH,IAAf,EAAqBI,OAArB,CAA6B,gBAAkB;AAAA;AAAA,QAAhBC,GAAgB;AAAA,QAAXC,KAAW;;AAC3C,QAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C;AACvCN,MAAAA,MAAM,CAACI,GAAD,CAAN,GAAcC,KAAd;AACH;AACJ,GAJD;AAKA,SAAOL,MAAP;AACH","sourcesContent":["export function mergeIfDefined(obj1, obj2) {\n    const newObj = {\n        ...obj1\n    };\n    Object.entries(obj2).forEach(([key, value]) => {\n        if (value !== null && value !== undefined) {\n            newObj[key] = value;\n        }\n    });\n    return newObj;\n}\n"]},"metadata":{},"sourceType":"module"}