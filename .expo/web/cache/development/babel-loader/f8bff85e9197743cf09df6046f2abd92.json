{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  albumName: null,\n  selectedAssets: []\n};\n\nvar addAsset = function addAsset(asset, state) {\n  return [].concat(_toConsumableArray(state.selectedAssets), [asset]);\n};\n\nvar removeAsset = function removeAsset(removedAsset, state) {\n  return state.selectedAssets.filter(function (asset) {\n    return asset.uri !== removedAsset.uri;\n  });\n};\n\nexport default mediaReducer = function mediaReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_ASSET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedAssets: addAsset(action.payload, state)\n      });\n\n    case 'REMOVE_ASSET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedAssets: removeAsset(action.payload, state)\n      });\n\n    case 'EMPTY':\n      return initialState;\n\n    case 'SET_ALBUM_NAME':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        albumName: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/VietAnh/Balogram/redux/reducers/mediaReducer.js"],"names":["initialState","albumName","selectedAssets","addAsset","asset","state","removeAsset","removedAsset","filter","uri","mediaReducer","action","type","payload"],"mappings":";;;;;;;AACA,IAAMA,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,IADM;AAEjBC,EAAAA,cAAc,EAAE;AAFC,CAArB;;AAMA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,KAAR,EAAkB;AAE/B,sCAAWA,KAAK,CAACH,cAAjB,IAAiCE,KAAjC;AAEH,CAJD;;AAMA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,YAAD,EAAeF,KAAf,EAAyB;AACzC,SAAOA,KAAK,CAACH,cAAN,CAAqBM,MAArB,CAA4B,UAAAJ,KAAK;AAAA,WAAIA,KAAK,CAACK,GAAN,KAAcF,YAAY,CAACE,GAA/B;AAAA,GAAjC,CAAP;AACH,CAFD;;AAIA,eAAeC,YAAY,GAAG,wBAAkC;AAAA,MAAjCL,KAAiC,uEAAzBL,YAAyB;AAAA,MAAXW,MAAW;;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,WAAL;AACI,6CACOP,KADP;AAEIH,QAAAA,cAAc,EAAEC,QAAQ,CAACQ,MAAM,CAACE,OAAR,EAAiBR,KAAjB;AAF5B;;AAKJ,SAAK,cAAL;AACI,6CACOA,KADP;AAEIH,QAAAA,cAAc,EAAEI,WAAW,CAACK,MAAM,CAACE,OAAR,EAAiBR,KAAjB;AAF/B;;AAKJ,SAAK,OAAL;AACI,aAAOL,YAAP;;AAEJ,SAAK,gBAAL;AACI,6CACOK,KADP;AAEIJ,QAAAA,SAAS,EAAEU,MAAM,CAACE;AAFtB;;AAKJ;AACI,aAAOR,KAAP;AAvBR;AAyBH,CA1BD","sourcesContent":["\r\nconst initialState = {\r\n    albumName: null,\r\n    selectedAssets: []\r\n};\r\n\r\n\r\nconst addAsset = (asset, state) => {\r\n\r\n    return [...state.selectedAssets, asset];\r\n\r\n}\r\n\r\nconst removeAsset = (removedAsset, state) => {\r\n    return state.selectedAssets.filter(asset => asset.uri !== removedAsset.uri);\r\n}\r\n\r\nexport default mediaReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_ASSET':\r\n            return {\r\n                ...state,\r\n                selectedAssets: addAsset(action.payload, state),\r\n            };\r\n\r\n        case 'REMOVE_ASSET':\r\n            return {\r\n                ...state,\r\n                selectedAssets: removeAsset(action.payload, state)\r\n            };\r\n\r\n        case 'EMPTY':\r\n            return initialState;\r\n\r\n        case 'SET_ALBUM_NAME':\r\n            return {\r\n                ...state,\r\n                albumName: action.payload\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}