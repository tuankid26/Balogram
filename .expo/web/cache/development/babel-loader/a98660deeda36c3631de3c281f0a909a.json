{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport api from \"./api\";\n\nvar getListPost_newfeed = function getListPost_newfeed(token) {\n  var url, listPost;\n  return _regeneratorRuntime.async(function getListPost_newfeed$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = '/posts/list';\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(api({\n            method: 'GET',\n            url: url,\n            headers: {\n              Authorization: \"Bearer \" + token\n            }\n          }));\n\n        case 3:\n          listPost = _context.sent;\n          return _context.abrupt(\"return\", listPost);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar addPost = function addPost(data) {\n  var token, described, images, videos, postInfo;\n  return _regeneratorRuntime.async(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          token = data.token;\n          described = data.described;\n          images = data.images;\n          videos = data.videos;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(api({\n            method: 'POST',\n            url: '/posts/create',\n            data: {\n              \"described\": described,\n              \"images\": images,\n              \"videos\": videos\n            },\n            headers: {\n              Authorization: \"Bearer \" + token\n            }\n          }));\n\n        case 6:\n          postInfo = _context2.sent;\n          return _context2.abrupt(\"return\", postInfo);\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar editPost = function editPost(data) {\n  var token, described, images, videos, postId, editInfo;\n  return _regeneratorRuntime.async(function editPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          token = data.token;\n          described = data.described;\n          images = data.images;\n          videos = data.videos;\n          postId = data.postId;\n          _context3.next = 7;\n          return _regeneratorRuntime.awrap(api({\n            method: 'POST',\n            url: \"/posts/edit/\" + postId,\n            data: {\n              \"described\": described,\n              \"images\": images,\n              \"videos\": videos\n            },\n            headers: {\n              Authorization: \"Bearer \" + token\n            }\n          }));\n\n        case 7:\n          editInfo = _context3.sent;\n          return _context3.abrupt(\"return\", editInfo);\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar deletePost = function deletePost(data) {\n  var token, postId, deleteInfo;\n  return _regeneratorRuntime.async(function deletePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          token = data.token;\n          postId = data.postId;\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(api({\n            method: \"GET\",\n            url: \"/posts/delete/\" + postId,\n            headers: {\n              Authorization: \"Bearer \" + token\n            }\n          }));\n\n        case 4:\n          deleteInfo = _context4.sent;\n          return _context4.abrupt(\"return\", deleteInfo);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport { addPost, getListPost_newfeed, editPost, deletePost };","map":{"version":3,"sources":["C:/Users/VietAnh/Balogram/handle_api/posts.js"],"names":["api","getListPost_newfeed","token","url","method","headers","Authorization","listPost","addPost","data","described","images","videos","postInfo","editPost","postId","editInfo","deletePost","deleteInfo"],"mappings":";AAAA,OAAOA,GAAP;;AAcA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,UAAAA,GADkB,GACZ,aADY;AAAA;AAAA,2CAEDH,GAAG,CAAC;AACvBI,YAAAA,MAAM,EAAE,KADe;AAEvBD,YAAAA,GAAG,EAAEA,GAFkB;AAGvBE,YAAAA,OAAO,EAAE;AAAEC,cAAAA,aAAa,cAAYJ;AAA3B;AAHc,WAAD,CAFF;;AAAA;AAElBK,UAAAA,QAFkB;AAAA,2CAOjBA,QAPiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;;AAUA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACNP,UAAAA,KADM,GACEO,IAAI,CAACP,KADP;AAENQ,UAAAA,SAFM,GAEMD,IAAI,CAACC,SAFX;AAGNC,UAAAA,MAHM,GAGGF,IAAI,CAACE,MAHR;AAINC,UAAAA,MAJM,GAIGH,IAAI,CAACG,MAJR;AAAA;AAAA,2CAKWZ,GAAG,CAAC;AACvBI,YAAAA,MAAM,EAAE,MADe;AAEvBD,YAAAA,GAAG,EAAE,eAFkB;AAGvBM,YAAAA,IAAI,EAAE;AACF,2BAAaC,SADX;AAEF,wBAAUC,MAFR;AAGF,wBAAUC;AAHR,aAHiB;AASvBP,YAAAA,OAAO,EAAE;AAAEC,cAAAA,aAAa,cAAYJ;AAA3B;AATc,WAAD,CALd;;AAAA;AAKNW,UAAAA,QALM;AAAA,4CAgBLA,QAhBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAoBA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAML,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACPP,UAAAA,KADO,GACCO,IAAI,CAACP,KADN;AAEPQ,UAAAA,SAFO,GAEKD,IAAI,CAACC,SAFV;AAGPC,UAAAA,MAHO,GAGEF,IAAI,CAACE,MAHP;AAIPC,UAAAA,MAJO,GAIEH,IAAI,CAACG,MAJP;AAKPG,UAAAA,MALO,GAKEN,IAAI,CAACM,MALP;AAAA;AAAA,2CAMUf,GAAG,CAAC;AACvBI,YAAAA,MAAM,EAAE,MADe;AAEvBD,YAAAA,GAAG,mBAAiBY,MAFG;AAGvBN,YAAAA,IAAI,EAAC;AACD,2BAAaC,SADZ;AAED,wBAAUC,MAFT;AAGD,wBAAUC;AAHT,aAHkB;AAQvBP,YAAAA,OAAO,EAAE;AAAEC,cAAAA,aAAa,cAAYJ;AAA3B;AARc,WAAD,CANb;;AAAA;AAMPc,UAAAA,QANO;AAAA,4CAgBNA,QAhBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AAkBA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAMR,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACTP,UAAAA,KADS,GACDO,IAAI,CAACP,KADJ;AAETa,UAAAA,MAFS,GAEAN,IAAI,CAACM,MAFL;AAAA;AAAA,2CAGUf,GAAG,CAAC;AACzBI,YAAAA,MAAM,EAAE,KADiB;AAEzBD,YAAAA,GAAG,qBAAmBY,MAFG;AAGzBV,YAAAA,OAAO,EAAE;AAAEC,cAAAA,aAAa,cAAYJ;AAA3B;AAHgB,WAAD,CAHb;;AAAA;AAGTgB,UAAAA,UAHS;AAAA,4CAQRA,UARQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAaA,SAAQV,OAAR,EAAiBP,mBAAjB,EAAsCa,QAAtC,EAAgDG,UAAhD","sourcesContent":["import api from './api';\r\n// import * as FileSystem from 'expo-file-system';\r\n// import { Asset } from 'expo-asset';\r\n\r\n// const addPost = async(postData, token) => {\r\n//     const createResult = await api({\r\n//         method: 'POST',\r\n//         url: '/posts/create',\r\n//         data: postData,\r\n//         headers: { Authorization: `Bearer ${token}` }\r\n//     });\r\n//     return createResult;\r\n// }\r\n\r\nconst getListPost_newfeed = async(token) => {\r\n    const url = '/posts/list';\r\n    const listPost = await api({\r\n        method: 'GET',\r\n        url: url,\r\n        headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return listPost;\r\n}\r\n\r\nconst addPost = async(data) => {\r\n    const token = data.token;\r\n    const described = data.described;\r\n    const images = data.images;\r\n    const videos = data.videos;\r\n    const postInfo = await api({\r\n        method: 'POST',\r\n        url: '/posts/create',\r\n        data: {\r\n            \"described\": described,\r\n            \"images\": images,\r\n            \"videos\": videos\r\n\r\n        },\r\n        headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return postInfo;\r\n\r\n}\r\n\r\nconst editPost = async(data) => {\r\n    const token = data.token;\r\n    const described = data.described;\r\n    const images = data.images;\r\n    const videos = data.videos;\r\n    const postId = data.postId;\r\n    const editInfo = await api({\r\n        method: 'POST',\r\n        url: `/posts/edit/${postId}`,\r\n        data:{\r\n            \"described\": described,\r\n            \"images\": images,\r\n            \"videos\": videos\r\n        },\r\n        headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return editInfo;\r\n}\r\nconst deletePost = async(data)=> {\r\n    const token = data.token;\r\n    const postId = data.postId;\r\n    const deleteInfo = await api({\r\n        method: \"GET\",\r\n        url: `/posts/delete/${postId}`,\r\n        headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return deleteInfo;\r\n}\r\n\r\n\r\n\r\nexport {addPost, getListPost_newfeed, editPost, deletePost};"]},"metadata":{},"sourceType":"module"}